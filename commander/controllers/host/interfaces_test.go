package host

import (
	"bytes"
	"strings"

	. "gopkg.in/check.v1"

	"github.com/jinzhu/gorm"
)

type InterfacesTestSuite struct {
	db         gorm.DB
	controller *Controller
}

func (ts *InterfacesTestSuite) SetUpTest(c *C) {
	db, err := gorm.Open("sqlite3", "file::memory:?cache=shared")
	c.Assert(err, IsNil)
	ts.db = db

	ts.controller = NewController(&ts.db)
	ts.controller.MigrateDB()
}

func (ts *InterfacesTestSuite) TearDownTest(c *C) {
	ts.db.Close()
}

//
// Tests
//

func (ts *InterfacesTestSuite) TestSaveInterfaceConfigShouldFailWithInvalidIPs(c *C) {
	err := ts.db.Create(&InterfaceConfig{Name: "test", Mode: ModeStatic}).Error
	c.Assert(err, Not(IsNil))

	// missing addr
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Gateway: "1.2.3.4",
		Netmask: "255.255.255.0"}).Error
	c.Assert(err, Not(IsNil))

	// missing gateway
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "1.2.3.4",
		Netmask: "255.255.255.0"}).Error
	c.Assert(err, Not(IsNil))

	// missing netmask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "5.6.7.8",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))

	// invalid netmask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "5.6.7.8",
		Netmask: "255.255.100.0",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))

	// gateway not within mask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))
}

func (ts *InterfacesTestSuite) TestFailDHCPProfileDeleteIfInterfaceUsesIt(c *C) {
	err := ts.db.Delete(&DHCPProfile{ID: 1}).Error
	c.Assert(err, Not(IsNil))
}

func (ts *InterfacesTestSuite) TestInterfaceFileGeneration(c *C) {

	err := ts.db.Create(&InterfaceConfig{
		Name:    "test1",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	err = ts.db.Create(&InterfaceConfig{
		Name:          "test2",
		Mode:          ModeDHCP,
		DHCPProfileID: 1,
	}).Error
	c.Assert(err, IsNil)

	filecontents, err := ts.controller.interfacesConfigFileContents()
	c.Assert(err, IsNil)

	expectedLines := []string{
		"# This file is AUTOGENERATED.",
		"#",
		"",
		"auto lo",
		"iface lo inet loopback",
		"",
		"auto eth0",
		"iface eth0 inet dhcp",
		"",
		"auto test1",
		"iface test1 inet static",
		"address 192.168.168.8",
		"netmask 255.255.255.0",
		"gateway 192.168.168.1",
		"",
		"auto test2",
		"iface test2 inet dhcp",
	}

	filebytes := bytes.NewBuffer(filecontents)
	for _, expstr := range expectedLines {
		b := filebytes.Next(len(expstr) + 1)
		c.Assert(string(b), Equals, expstr+"\n")
	}
}

func (ts *InterfacesTestSuite) TestDhclientConfFileGeneration(c *C) {
	err := ts.db.Create(&InterfaceConfig{
		Name:    "test0",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	// by default db contains eth0 set to dhcp mode.
	filecontents, err := ts.controller.dhclientConfFileContents()
	c.Assert(err, IsNil)

	// Ensure a section exists for dhcp interface
	c.Assert(strings.Contains(string(filecontents), "interface eth0 {"), Equals, true)
	// No section for static interfaces
	c.Assert(strings.Contains(string(filecontents), "interface test0 {"), Equals, false)
}
