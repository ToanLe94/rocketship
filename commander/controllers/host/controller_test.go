package host

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"

	"github.com/jinzhu/gorm"

	_ "fmt"
	_ "github.com/mattn/go-sqlite3"
	. "gopkg.in/check.v1"
)

//
// Test Suite
//

type TestSuite struct {
	db         gorm.DB
	server     *httptest.Server
	controller *Controller
}

func (ts *TestSuite) SetUpSuite(c *C) {
	db, err := gorm.Open("sqlite3", ":memory:")
	c.Assert(err, IsNil)

	ts.db = db
	ts.controller = NewController(&ts.db)
	ts.server = httptest.NewServer(ts.controller)
}

func (ts *TestSuite) TearDownSuite(c *C) {
	ts.server.Close()
}

func (ts *TestSuite) SetUpTest(c *C) {
	db, err := gorm.Open("sqlite3", "file::memory:?cache=shared")
	c.Assert(err, IsNil)
	ts.db = db
	ts.controller.MigrateDB()
}

func (ts *TestSuite) TearDownTest(c *C) {
	ts.db.Close()
}

//
// Helpers
//

func (ts *TestSuite) requestWithJSONBody(c *C, reqtype, url string, bodystruct interface{}) *http.Request {
	bodybytes, err := json.Marshal(bodystruct)
	c.Assert(err, IsNil)

	req, err := http.NewRequest(reqtype, url, bytes.NewBuffer(bodybytes))
	c.Assert(err, IsNil)

	return req
}

func (ts *TestSuite) getHostnameFromRequest(c *C) Hostname {
	req, err := http.NewRequest("GET", ts.server.URL+EHostname, nil)
	c.Assert(err, IsNil)

	client := &http.Client{}
	resp, err := client.Do(req)
	c.Assert(resp.StatusCode, Equals, http.StatusOK)

	resbody, err := ioutil.ReadAll(resp.Body)
	c.Assert(err, IsNil)

	h := Hostname{}
	err = json.Unmarshal(resbody, &h)
	c.Assert(err, IsNil)

	return h
}

func (ts *TestSuite) getDomainFromRequest(c *C) Domain {
	req, err := http.NewRequest("GET", ts.server.URL+EDomain, nil)
	c.Assert(err, IsNil)

	client := &http.Client{}
	resp, err := client.Do(req)
	c.Assert(resp.StatusCode, Equals, http.StatusOK)

	resbody, err := ioutil.ReadAll(resp.Body)
	c.Assert(err, IsNil)

	d := Domain{}
	err = json.Unmarshal(resbody, &d)
	c.Assert(err, IsNil)

	return d
}

func (ts *TestSuite) getHostnameFromDB(c *C) Hostname {
	host := Hostname{}
	err := ts.db.First(&host, 1).Error
	c.Assert(err, IsNil)
	return host
}

func (ts *TestSuite) getDomainFromDB(c *C) Domain {
	dom := Domain{}
	err := ts.db.First(&dom, 1).Error
	c.Assert(err, IsNil)
	return dom
}

//
// Tests
//

func (ts *TestSuite) TestDefaultEntries(c *C) {
	ifaces := []InterfaceConfig{}
	profile := DHCPProfile{}

	err := ts.db.Find(&ifaces).Error
	c.Assert(err, IsNil)

	err = ts.db.Find(&profile, 1).Error
	c.Assert(err, IsNil)

	// ensure one interface
	c.Assert(len(ifaces), Equals, 1)

	// ensure it is in dhcp mode, and uses the default profile
	c.Assert(ifaces[0].Mode, Equals, ModeDHCP)
	c.Assert(ifaces[0].DHCPProfileID, Equals, profile.ID)
}

func (ts *TestSuite) TestGetHostname(c *C) {
	h := ts.getHostnameFromRequest(c)
	c.Assert(h.Hostname, Equals, DefaultHostname)
}

func (ts *TestSuite) TestGetDomain(c *C) {
	d := ts.getDomainFromRequest(c)
	c.Assert(d.Domain, Equals, DefaultDomain)
}

func (ts *TestSuite) TestPutHostname(c *C) {

	body := Hostname{Hostname: "foobar"}
	req := ts.requestWithJSONBody(c, "PUT", ts.server.URL+EHostname, body)

	client := &http.Client{}
	resp, err := client.Do(req)
	c.Assert(err, IsNil)
	c.Assert(resp.StatusCode, Equals, http.StatusOK)

	resbody, err := ioutil.ReadAll(resp.Body)
	c.Assert(err, IsNil)

	h := Hostname{}
	err = json.Unmarshal(resbody, &h)
	c.Assert(err, IsNil)

	// Ensure response has new hostname
	c.Assert(h.Hostname, Equals, "foobar")

	// Ensure it is the same as the DB
	h1 := ts.getHostnameFromDB(c)
	h2 := ts.getHostnameFromRequest(c)
	c.Assert(h1.Hostname, Equals, h2.Hostname)
}

func (ts *TestSuite) TestPutDomain(c *C) {

	body := Domain{Domain: "foobar"}
	req := ts.requestWithJSONBody(c, "PUT", ts.server.URL+EDomain, body)

	client := &http.Client{}
	resp, err := client.Do(req)
	c.Assert(err, IsNil)
	c.Assert(resp.StatusCode, Equals, http.StatusOK)

	resbody, err := ioutil.ReadAll(resp.Body)
	c.Assert(err, IsNil)

	d := Domain{}
	err = json.Unmarshal(resbody, &d)
	c.Assert(err, IsNil)

	// Ensure response has new domain
	c.Assert(d.Domain, Equals, "foobar")

	// Ensure it is the same as the DB
	d1 := ts.getDomainFromDB(c)
	d2 := ts.getDomainFromRequest(c)
	c.Assert(d1.Domain, Equals, d2.Domain)
}

func (ts *TestSuite) TestHostnameFileContents(c *C) {
	contents, err := ts.controller.hostnameFileContents()
	c.Assert(err, IsNil)
	c.Assert(string(contents), Equals, DefaultHostname+"\n")
}

func (ts *TestSuite) TestInterfaceFileGeneration(c *C) {

	err := ts.db.Create(&InterfaceConfig{
		Name:    "test1",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	err = ts.db.Create(&InterfaceConfig{
		Name:          "test2",
		Mode:          ModeDHCP,
		DHCPProfileID: 1,
	}).Error
	c.Assert(err, IsNil)

	filecontents, err := ts.controller.interfacesConfigFileContents()
	c.Assert(err, IsNil)

	expectedLines := []string{
		"# This file is AUTOGENERATED.",
		"#",
		"",
		"auto lo",
		"iface lo inet loopback",
		"",
		"auto eth0",
		"iface eth0 inet dhcp",
		"",
		"auto test1",
		"iface test1 inet static",
		"address 192.168.168.8",
		"netmask 255.255.255.0",
		"gateway 192.168.168.1",
		"",
		"auto test2",
		"iface test2 inet dhcp",
	}

	filebytes := bytes.NewBuffer(filecontents)
	for _, expstr := range expectedLines {
		b := filebytes.Next(len(expstr) + 1)
		c.Assert(string(b), Equals, expstr+"\n")
	}
}

func (ts *TestSuite) TestDhclientConfFileGeneration(c *C) {
	err := ts.db.Create(&InterfaceConfig{
		Name:    "test0",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	// by default db contains eth0 set to dhcp mode.
	filecontents, err := ts.controller.dhclientConfFileContents()
	c.Assert(err, IsNil)

	// Ensure a section exists for dhcp interface
	c.Assert(strings.Contains(string(filecontents), "interface eth0 {"), Equals, true)
	// No section for static interfaces
	c.Assert(strings.Contains(string(filecontents), "interface test0 {"), Equals, false)
}
