package stats

import (
	"io/ioutil"
	"net/http"
	"rocketship/regulog"
	"sync"

	"github.com/jinzhu/gorm"
	"github.com/zenazn/goji/web"
)

const (
	URLPrefix = "/stats"

	PrometheusConfPath = "/opt/prometheus/prometheus.yml"
)

type Controller struct {
	db   *gorm.DB
	mux  *web.Mux
	log  regulog.Logger
	lock sync.Mutex
}

func NewController(db *gorm.DB, logger regulog.Logger) *Controller {
	ctrl := &Controller{db: db, mux: web.New(), log: logger}

	return ctrl
}

// ServeHTTP satisfies the http.Handler interface (net/http as well as goji)
func (c *Controller) ServeHTTPC(ctx web.C, w http.ResponseWriter, r *http.Request) {
	c.lock.Lock()
	c.mux.ServeHTTPC(ctx, w, r)
	c.lock.Unlock()
	return
}

// RoutePrefix returns the URL prefix under which this controller serves its routes
func (c *Controller) RoutePrefix() string {
	return URLPrefix
}

// RewriteFiles regenerates all the config files this controller is responsible for.
func (c *Controller) RewriteFiles() error {
	if err := c.RewritePrometheusFile(); err != nil {
		return err
	}
	return nil
}

// Rewrite default prometheus conf file
func (c *Controller) RewritePrometheusFile() error {
	c.log.Infoln("Rewriting graphite defaults file")

	contents, err := c.prometheusFileContents()
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(PrometheusConfPath, contents, 0644)
	if err != nil {
		return err
	}

	return nil
}

func (c *Controller) prometheusFileContents() ([]byte, error) {

	conf := `
# Prometheus config (generated by commander)
scrape_configs:
  - job_name: "node"
    scrape_interval: "15s"
    target_groups:
    - targets: ['localhost:9100']
`
	return []byte(conf), nil
}

func (c *Controller) SeedDB() {
	return
}

func (c *Controller) MigrateDB() {
	return
}
