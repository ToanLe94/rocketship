package host

import (
	"bytes"
	"io/ioutil"
	"log"
	"rocketship/regulog"
	"strings"

	_ "github.com/mattn/go-sqlite3"
	. "gopkg.in/check.v1"

	"github.com/jinzhu/gorm"
)

type InterfacesTestSuite struct {
	db         gorm.DB
	controller *Controller
}

func (ts *InterfacesTestSuite) SetUpTest(c *C) {
	db, err := gorm.Open("sqlite3", "file::memory:?cache=shared")
	c.Assert(err, IsNil)

	// Comment this to enable db logs during tests
	db.SetLogger(log.New(ioutil.Discard, "", 0))
	ts.db = db

	ts.controller = NewController(&ts.db, regulog.NewNull("test"))
	ts.controller.MigrateDB()
	ts.controller.SeedDB()
}

func (ts *InterfacesTestSuite) TearDownTest(c *C) {
	ts.db.Close()
}

//
// DB Tests
//

func (ts *InterfacesTestSuite) TestInterfaceNameCannotBeChanged(c *C) {
	test := InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "1.2.3.4",
		Gateway: "1.2.3.4",
		Netmask: "255.255.255.0",
	}

	err := ts.db.Create(&test).Error
	c.Assert(err, IsNil)

	test.Name = "foobar"

	err = ts.db.Save(&test).Error
	c.Assert(err, Not(IsNil))
}

func (ts *InterfacesTestSuite) TestSaveInterfaceConfigShouldFailWithInvalidIPs(c *C) {
	err := ts.db.Create(&InterfaceConfig{Name: "test", Mode: ModeStatic}).Error
	c.Assert(err, Not(IsNil))

	// missing addr
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Gateway: "1.2.3.4",
		Netmask: "255.255.255.0"}).Error
	c.Assert(err, Not(IsNil))

	// missing gateway
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "1.2.3.4",
		Netmask: "255.255.255.0"}).Error
	c.Assert(err, Not(IsNil))

	// missing netmask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "5.6.7.8",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))

	// invalid netmask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "5.6.7.8",
		Netmask: "255.255.100.0",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))

	// gateway not within mask
	err = ts.db.Create(&InterfaceConfig{
		Name:    "test",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "1.2.3.4"}).Error
	c.Assert(err, Not(IsNil))
}

func (ts *InterfacesTestSuite) TestFailDHCPProfileDeleteIfInterfaceUsesIt(c *C) {
	err := ts.db.Delete(&DHCPProfile{ID: 1}).Error
	c.Assert(err, Not(IsNil))
}

func (ts *InterfacesTestSuite) TestInterfaceFileGeneration(c *C) {

	err := ts.db.Create(&InterfaceConfig{
		Name:    "test1",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	err = ts.db.Create(&InterfaceConfig{
		Name:          "test2",
		Mode:          ModeDHCP,
		DHCPProfileID: 1,
	}).Error
	c.Assert(err, IsNil)

	filecontents, err := ts.controller.interfacesConfigFileContents()
	c.Assert(err, IsNil)

	expectedLines := []string{
		"# This file is AUTOGENERATED.",
		"#",
		"",
		"auto lo",
		"iface lo inet loopback",
		"",
		"auto eth0",
		"iface eth0 inet dhcp",
		"",
		"auto test1",
		"iface test1 inet static",
		"address 192.168.168.8",
		"netmask 255.255.255.0",
		"gateway 192.168.168.1",
		"dns-nameservers 8.8.8.8 8.8.4.4",
		"",
		"auto test2",
		"iface test2 inet dhcp",
	}

	filebytes := bytes.NewBuffer(filecontents)
	c.Log(string(filecontents))
	for _, expstr := range expectedLines {
		b := filebytes.Next(len(expstr) + 1)
		c.Assert(string(b), Equals, expstr+"\n")
	}
}

func (ts *InterfacesTestSuite) TestDhclientConfFileGeneration(c *C) {
	err := ts.db.Create(&InterfaceConfig{
		Name:    "test0",
		Mode:    ModeStatic,
		Address: "192.168.168.8",
		Netmask: "255.255.255.0",
		Gateway: "192.168.168.1"}).Error
	c.Assert(err, IsNil)

	// by default db contains eth0 set to dhcp mode.
	filecontents, err := ts.controller.dhclientConfFileContents()
	c.Assert(err, IsNil)

	// Ensure a section exists for dhcp interface
	c.Assert(strings.Contains(string(filecontents), "interface \"eth0\" {"), Equals, true)
	// No section for static interfaces
	c.Assert(strings.Contains(string(filecontents), "interface \"test0\" {"), Equals, false)
}

func (ts *InterfacesTestSuite) TestDhclientConfFileGenerationWithOverrides(c *C) {
	err := ts.db.Create(&DHCPProfile{
		OverrideHostname:   true,
		OverrideDomainName: true,
	}).Error
	c.Assert(err, IsNil)

	err = ts.db.Save(&InterfaceConfig{
		ID:            1,
		Name:          "eth0",
		Mode:          ModeDHCP,
		DHCPProfileID: 2,
	}).Error
	c.Assert(err, IsNil)

	filecontents, err := ts.controller.dhclientConfFileContents()
	c.Assert(err, IsNil)
	c.Log(string(filecontents))

	// Ensure a supersede section for the default hostname.
	c.Assert(strings.Contains(string(filecontents), "supersede host-name \"ncc1701\""), Equals, true)
}

//
// Resource tests
//

func (r *InterfacesTestSuite) TestDHCPProfileToResourceConversion(c *C) {

	goodProfiles := []DHCPProfile{
		DHCPProfile{
			TimingOptions:    "{}", // Dont care
			SendOptions:      "{}", // Dont care
			RequireOptions:   "[]",
			RequestOptions:   "[]",
			DNSMode:          ModeAppend,
			OverrideHostname: true,
		},
		DHCPProfile{
			TimingOptions:    DefaultTimingOptionsJSON,
			SendOptions:      DefaultSendOptionsJSON,
			RequireOptions:   DefaultRequestOptionsJSON,
			DNSMode:          ModeAppend,
			OverrideHostname: false,
		},
	}

	badProfiles := []DHCPProfile{
		DHCPProfile{
			RequireOptions:   "[]",
			RequestOptions:   "asdf", // bad json
			DNSMode:          ModeAppend,
			OverrideHostname: true,
		},
		DHCPProfile{
			RequireOptions:   "qwer", // bad json
			RequestOptions:   "[]",
			DNSMode:          ModeAppend,
			OverrideHostname: true,
		},
	}

	for _, d := range goodProfiles {
		resource := &DHCPProfileResource{}
		c.Assert(resource.FromDHCPProfileModel(d), IsNil)
		c.Assert(resource.DNSMode, Equals, d.DNSMode)
		c.Assert(resource.OverrideHostname, Equals, d.OverrideHostname)
		c.Assert(resource.OverrideDomainName, Equals, d.OverrideDomainName)
	}

	for _, d := range badProfiles {
		resource := DHCPProfileResource{}
		c.Assert(resource.FromDHCPProfileModel(d), Not(IsNil))
	}
}

func (r *InterfacesTestSuite) TestDHCPResourceToProfileConversion(c *C) {

	goodResoures := []DHCPProfileResource{
		{
			DNSMode:          ModeAppend,
			RequireOptions:   []string{"subnet-mask"},
			RequestOptions:   []string{"subnet-mask", "routers", "domain-name"},
			OverrideHostname: true,
		},
		{
			DNSMode:          ModePrepend,
			RequireOptions:   []string{},
			RequestOptions:   []string{},
			OverrideHostname: true,
		},
	}

	badResoures := []DHCPProfileResource{
		{
			DNSMode:          "", // missing mode
			RequireOptions:   []string{"subnet-mask"},
			RequestOptions:   []string{"subnet-mask", "routers", "domain-name"},
			OverrideHostname: true,
		},
	}

	for _, resource := range goodResoures {
		d, err := resource.ToDHCPProfileModel()
		c.Assert(err, IsNil)
		c.Assert(resource.DNSMode, Equals, d.DNSMode)
		c.Assert(resource.OverrideHostname, Equals, d.OverrideHostname)
		c.Assert(resource.OverrideDomainName, Equals, d.OverrideDomainName)
	}

	for _, resource := range badResoures {
		err, _ := resource.ToDHCPProfileModel()
		c.Assert(err, Not(IsNil))
	}
}

func (ts *InterfacesTestSuite) TestDefaultEntries(c *C) {
	ifaces := []InterfaceConfig{}
	profile := DHCPProfile{}

	err := ts.db.Find(&ifaces).Error
	c.Assert(err, IsNil)

	err = ts.db.Find(&profile, 1).Error
	c.Assert(err, IsNil)

	// ensure one interface
	c.Assert(len(ifaces), Equals, 1)

	// ensure it is in dhcp mode, and uses the default profile
	c.Assert(ifaces[0].Mode, Equals, ModeDHCP)
	c.Assert(ifaces[0].DHCPProfileID, Equals, profile.ID)
}
